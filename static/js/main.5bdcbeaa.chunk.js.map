{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","chooseUserId","selectedUserId","useState","query","setQuery","status","setStatus","visibleTodos","setVisibleTodos","useEffect","filteredTodos","filter","selectedTodo","conditionOfSelect","title","toLowerCase","includes","trim","completed","handlerFilter","className","length","type","name","value","onChange","event","target","map","todo","classNames","readOnly","checked","userId","onClick","Number","id","API_URL","getTodos","a","fetch","response","json","gottenTodos","getUser","gottenUser","CurrentUser","resetUserId","selectedUser","setSelectedUser","getData","useCallback","Error","username","email","phone","App","setSelectedUserId","setTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5bdcbeaa.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/TodoType';\n\ntype Props = {\n  todos: Todo[],\n  chooseUserId: (userId: number) => void,\n  selectedUserId: number,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  chooseUserId,\n  selectedUserId,\n}) => {\n  const [query, setQuery] = useState('');\n  const [status, setStatus] = useState('all');\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>(todos);\n\n  const handlerFilter = () => {\n    const filteredTodos = todos.filter((selectedTodo) => {\n      const conditionOfSelect = selectedTodo.title\n        .toLowerCase().includes(query.trim().toLowerCase());\n\n      if (query.trim() !== '' && status === 'all') {\n        return conditionOfSelect;\n      }\n\n      if (status === 'completed') {\n        return conditionOfSelect && selectedTodo.completed;\n      }\n\n      if (status === 'active') {\n        return conditionOfSelect && !selectedTodo.completed;\n      }\n\n      return true;\n    });\n\n    setVisibleTodos(filteredTodos);\n  };\n\n  useEffect(() => {\n    setVisibleTodos(todos);\n    handlerFilter();\n  }, [todos, query, status]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>\n        Todos:&nbsp;\n        {visibleTodos.length}\n        &nbsp;from&nbsp;\n        {todos.length}\n      </h2>\n      <div className=\"TodoList__inputs-group\">\n        <div className=\"TodoList__inputs\">\n          <input\n            className=\"TodoList__input\"\n            data-cy=\"filterByTitle\"\n            type=\"text\"\n            name=\"title\"\n            value={query}\n            onChange={(event) => {\n              setQuery(event.target.value);\n            }}\n          />\n          <p className=\"TodoList__input-name\">\n            Search a case\n          </p>\n        </div>\n        <div className=\"TodoList__inputs\">\n          <select\n            className=\"TodoList__input\n            TodoList__input--select\"\n            name=\"status\"\n            value={status}\n            onChange={(event) => {\n              setStatus(event.target.value);\n            }}\n          >\n            <option value=\"all\">\n              Demonstrate all\n            </option>\n            <option value=\"active\">\n              Demonstrate active\n            </option>\n            <option value=\"completed\">\n              Demonstrate completed\n            </option>\n          </select>\n          <p className=\"TodoList__input-name\">\n            Select status\n          </p>\n        </div>\n      </div>\n      <div className=\"TodoList__list-container\">\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {visibleTodos.map((todo) => (\n            <li\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                },\n              )}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>\n                  {todo.title}\n                </p>\n              </label>\n\n              {todo.userId && (\n                <button\n                  type=\"button\"\n                  data-cy=\"userButton\"\n                  onClick={() => chooseUserId(Number(todo.userId))}\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    {\n                      'TodoList__user-button--selected':\n                        selectedUserId === Number(todo.userId),\n                    },\n                  )}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              )}\n\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { Todo, User } from '../types/TodoType';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${API_URL}/todos`);\n  const gottenTodos: Todo[] = await response.json();\n\n  return gottenTodos;\n}\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n  const gottenUser = await response.json();\n\n  return gottenUser;\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\nimport { User } from '../../types/TodoType';\n\ntype Props = {\n  selectedUserId: number,\n  resetUserId: (id: number) => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({\n  selectedUserId,\n  resetUserId,\n}) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const getData = useCallback(async () => {\n    try {\n      setSelectedUser(await getUser(selectedUserId));\n    } catch (error) {\n      throw Error(`${error}`);\n    }\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    getData();\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:&nbsp;\n          {selectedUser ? selectedUser.id : (<div />)}\n        </span>\n      </h2>\n      <h3\n        className=\"CurrentUser__name\"\n        data-cy=\"userName\"\n      >\n        {selectedUser?.username || 'Error'}\n      </h3>\n      <p className=\"CurrentUser__email\">\n        {selectedUser?.email || 'Error'}\n      </p>\n      <p className=\"CurrentUser__phone\">\n        {selectedUser?.phone || 'Error'}\n      </p>\n      <button\n        type=\"button\"\n        className=\"CurrentUser__clear\n        button\"\n        onClick={() => resetUserId(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\nimport { Todo } from './types/TodoType';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const getData = useCallback(async () => {\n    const gottenTodos = await getTodos();\n\n    setTodos(gottenTodos);\n  }, []);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          chooseUserId={setSelectedUserId}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              resetUserId={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}