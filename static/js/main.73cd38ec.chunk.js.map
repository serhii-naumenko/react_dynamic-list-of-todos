{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","chooseUserId","selectedUserId","useState","query","setQuery","status","setStatus","visibleTodos","setVisibleTodos","useEffect","className","length","type","name","value","onChange","event","text","selectedTodos","filter","todo","title","includes","trim","sortTodosAlphabet","target","cell","selectedTodo","completed","handlerSelect","map","classNames","readOnly","checked","onClick","Number","userId","id","API_URL","getTodos","a","fetch","response","json","gottenTodos","getUser","gottenUser","CurrentUser","resetUserId","selectedUser","setSelectedUser","getData","useCallback","user","email","phone","App","setSelectedUserId","setTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.73cd38ec.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/TodoType';\n\ntype Props = {\n  todos: Todo[],\n  chooseUserId: (userId: number) => void,\n  selectedUserId: number,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  chooseUserId,\n  selectedUserId,\n}) => {\n  const [query, setQuery] = useState('');\n  const [status, setStatus] = useState('all');\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    setVisibleTodos(todos);\n  }, [todos]);\n\n  const handlerSelect = (cell: string) => {\n    setStatus(cell);\n\n    let selectedTodos = todos;\n\n    if (cell === 'completed') {\n      selectedTodos = selectedTodos\n        .filter((selectedTodo) => selectedTodo.completed === true);\n    }\n\n    if (cell === 'active') {\n      selectedTodos = selectedTodos\n        .filter((selectedTodo) => selectedTodo.completed === false);\n    }\n\n    if (cell === 'all') {\n      selectedTodos = todos;\n    }\n\n    if (query.trim() !== '') {\n      selectedTodos = selectedTodos.filter((selectedTodo) => (\n        selectedTodo.title.includes(query.trim())\n      ));\n    }\n\n    setVisibleTodos(selectedTodos);\n  };\n\n  const sortTodosAlphabet = (text: string) => {\n    setQuery(text);\n\n    const selectedTodos = todos.filter((todo) => (\n      todo.title.includes(text.trim())\n    ));\n\n    setVisibleTodos(selectedTodos);\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>\n        Todos:&nbsp;\n        {visibleTodos.length}\n        &nbsp;from&nbsp;\n        {todos.length}\n      </h2>\n      <input\n        className=\"Todolist__input\"\n        data-cy=\"filterByTitle\"\n        type=\"text\"\n        name=\"title\"\n        value={query}\n        onChange={(event) => sortTodosAlphabet(event.target.value)}\n      />\n      <select\n        className=\"Todolist__select\"\n        name=\"status\"\n        value={status}\n        onChange={(event) => {\n          handlerSelect(event.target.value);\n        }}\n      >\n        <option value=\"all\">\n          Demonstrate all\n        </option>\n        <option value=\"active\">\n          Demonstrate active\n        </option>\n        <option value=\"completed\">\n          Demonstrate completed\n        </option>\n\n      </select>\n      <div className=\"TodoList__list-container\">\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {visibleTodos.map((todo) => (\n            <li\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--unchecked':\n                    todo.completed === false,\n                  'TodoList__item--checked':\n                    todo.completed === true,\n                },\n              )}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>\n                  {todo.title}\n                </p>\n              </label>\n\n              <button\n                type=\"button\"\n                onClick={() => chooseUserId(Number(todo.userId))}\n                className={classNames(\n                  'TodoList__user-button',\n                  'button',\n                  {\n                    'TodoList__user-button--selected':\n                      selectedUserId !== Number(todo.userId),\n                  },\n                )}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { Todo, User } from '../types/TodoType';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${API_URL}/todos`);\n  const gottenTodos: Todo[] = await response.json();\n\n  return gottenTodos;\n}\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n  const gottenUser = await response.json();\n\n  return gottenUser;\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\nimport { User } from '../../types/TodoType';\n\ntype Props = {\n  selectedUserId: number,\n  resetUserId: (id: number) => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({\n  selectedUserId,\n  resetUserId,\n}) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const getData = useCallback(async () => {\n    const user = await getUser(selectedUserId);\n\n    setSelectedUser(user);\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    getData();\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:&nbsp;\n          {selectedUser ? selectedUser.id : (<div />)}\n        </span>\n      </h2>\n      <h3\n        className=\"CurrentUser__name\"\n        data-cy=\"userName\"\n      >\n        {selectedUser ? selectedUser.name : 'Error'}\n      </h3>\n      <p className=\"CurrentUser__email\">\n        {selectedUser ? selectedUser.email : 'Error'}\n      </p>\n      <p className=\"CurrentUser__phone\">\n        {selectedUser ? selectedUser.phone : 'Error'}\n      </p>\n      <button\n        type=\"button\"\n        className=\"CurrentUser__button\"\n        onClick={() => resetUserId(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\nimport { Todo } from './types/TodoType';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const getData = useCallback(async () => {\n    const gottenTodos = await getTodos();\n\n    setTodos(gottenTodos);\n  }, []);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          chooseUserId={setSelectedUserId}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              resetUserId={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}